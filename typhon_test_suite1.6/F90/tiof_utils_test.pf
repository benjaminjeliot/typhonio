!
! tiof_utils_test.pf
!

!=======================================================================================================================

subroutine test_setlen

  use pfunit_mod
  use typhonio
  use tio_utils_mod
  implicit none

  integer :: ierr
  integer :: i
  integer :: strlen
  character(len=(TIO_STRLEN_F*2)) :: invalid
  
  strlen = -1
  ierr = setlen('', '', '12345', strlen)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( 5, strlen )
  
  strlen = -1
  ierr = setlen('', '', '12345  ', strlen)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( 5, strlen )
  
  invalid = repeat('a', len(invalid))
  ierr = setlen('', '', invalid, strlen)
  @assertFalse(TIO_SUCCESS_F == ierr)

end subroutine test_setlen

!=======================================================================================================================

subroutine test_setstr

  use pfunit_mod
  use typhonio
  use tio_utils_mod
  implicit none

  integer :: ierr
  integer :: i
  character(len=TIO_STRLEN_F) :: strout
  character(len=(TIO_STRLEN_F*2)) :: invalid
  
  strout = repeat(' ', len(strout))
  ierr = setstr('', '', '12345', strout)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( '12345', strout )
  
  strout = repeat(' ', len(strout))
  ierr = setstr('', '', '12345  ', strout)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( '12345', strout )
  
  invalid = repeat('a', len(invalid))
  ierr = setstr('', '', invalid, strout)
  @assertFalse(TIO_SUCCESS_F == ierr)

end subroutine test_setstr

!=======================================================================================================================

subroutine test_listnames

  use pfunit_mod
  use typhonio
  use tio_utils_mod
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_utils.h5"
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id
  integer(kind=TIO_OBJK) :: material_id
  integer(kind=TIO_SIZEK) :: nobj
  character(len=TIO_STRLEN_F), dimension(3) :: names

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  nobj = 3
  
  ierr = listnames('', LISTCLASS_STATE, file_id, TIO_NULL_F, nobj, names)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( 3, nobj )
  !@assertEqual( (/ "State1", "State2", "State3" /), names )
  @assertEqual( "State1", names(1) )
  @assertEqual( "State2", names(2) )
  @assertEqual( "State3", names(3) )
  
  ierr = TIO_Open_State_f(file_id, "State1", state_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  ierr = listnames('', LISTCLASS_VGROUP, file_id, state_id, nobj, names)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( 3, nobj )
  !@assertEqual( (/ "VarGroup1", "VarGroup2", "VarGroup3" /), names )
  @assertEqual( "VarGroup1", names(1) )
  @assertEqual( "VarGroup2", names(2) )
  @assertEqual( "VarGroup3", names(3) )
  
  ierr = listnames('', LISTCLASS_VARIABLE, file_id, state_id, nobj, names)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( 3, nobj )
  !@assertEqual( (/ "Variable1", "Variable2", "Variable3" /), names )
  @assertEqual( "Variable1", names(1) )
  @assertEqual( "Variable2", names(2) )
  @assertEqual( "Variable3", names(3) )

  ierr = listnames('', LISTCLASS_MESH, file_id, state_id, nobj, names)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( 3, nobj )
  !@assertEqual( (/ "Mesh1", "Mesh2", "Mesh3" /), names )
  @assertEqual( "Mesh1", names(1) )
  @assertEqual( "Mesh2", names(2) )
  @assertEqual( "Mesh3", names(3) )
  
  ierr = TIO_Open_Mesh_f(file_id, state_id, "Mesh1", mesh_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_Mat_f(file_id, mesh_id, "Material1", material_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  ierr = listnames('', LISTCLASS_MAT, file_id, material_id, nobj, names)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( 3, nobj )
  !@assertEqual( (/ "Mat1", "Mat2", "Mat3" /), names )
  @assertEqual( "Mat1", names(1) )
  @assertEqual( "Mat2", names(2) )
  @assertEqual( "Mat3", names(3) )
  
  ierr = listnames('', LISTCLASS_QUANT, file_id, mesh_id, nobj, names)
  @assertEqual(TIO_SUCCESS_F, ierr)
  @assertEqual( 3, nobj )
  !@assertEqual( (/ "Quant1", "Quant2", "Quant3" /), names )
  @assertEqual( "Quant1", names(1) )
  @assertEqual( "Quant2", names(2) )
  @assertEqual( "Quant3", names(3) )
  
end subroutine test_listnames

!=======================================================================================================================
