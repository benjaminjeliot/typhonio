! tiof_chunk_test.pf

@test
subroutine test_tio_get_chunks_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_chunk.h5"
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id
  integer(kind=TIO_SIZEK) :: nchunks

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_State_f(file_id, "State1", state_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_Mesh_f(file_id, state_id, "Mesh", mesh_id)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Get_nchunks_f(file_id, mesh_id, nchunks)
  @assertEqual(TIO_SUCCESS_F, ierr)

  @assertEqual(4, nchunks)

end subroutine test_tio_get_chunks_f

!=======================================================================================================================

@test
subroutine test_tio_set_quad_chunk_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_set_quad_chunk.h5"
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title")
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Create_State_f( file_id, "State1", state_id, 1, 0.0_TIO_TIMEK, "seconds" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Create_Mesh_f( file_id, state_id, "QuadMesh", mesh_id,                              &
       &                        TIO_MESH_QUAD_COLINEAR_F, TIO_COORD_CARTESIAN_F, .false., "Group2", 1, &
       &                        TIO_INTEGER4_F, TIO_REAL8_F, TIO_3D_F, 100, 100, 100, 0, 1,               &
       &                        "mm", "mm", "mm", "x", "y", "z" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Set_Quad_Chunk_f(file_id, mesh_id, 1, TIO_3D_F, 1, 10, 1, 10, 1, 10, 5, 0)
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_set_quad_chunk_f

!=======================================================================================================================

@test
subroutine test_tio_get_quad_chunk_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_chunk.h5"
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id
  integer(kind=TIO_IPK) :: ndims
  integer(kind=TIO_SIZEK) :: il, ih, jl, jh, kl, kh
  integer(kind=TIO_SIZEK) :: nmixcell, nmixcomp

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_State_f(file_id, "State1", state_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_Mesh_f(file_id, state_id, "QuadMesh", mesh_id)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Get_Quad_Chunk_f(file_id, mesh_id, 1, ndims, il, ih, jl, jh, kl, kh, nmixcell, nmixcomp)
  @assertEqual(TIO_SUCCESS_F, ierr)

  @assertEqual( TIO_3D_F, ndims )
  @assertEqual( -10, il )
  @assertEqual(  10, ih )
  @assertEqual( -20, jl )
  @assertEqual(  20, jh )
  @assertEqual( -30, kl )
  @assertEqual(  30, kh )
  @assertEqual( 5, nmixcell )
  @assertEqual( 0, nmixcomp )

end subroutine test_tio_get_quad_chunk_f

!=======================================================================================================================

@test
subroutine test_tio_set_quad_section_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_set_quad_section.h5"
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id
  integer(kind=TIO_OBJK) :: section_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title")
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Create_State_f( file_id, "State1", state_id, 1, 0.0_TIO_TIMEK, "seconds" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Create_Mesh_f( file_id, state_id, "QuadMesh", mesh_id,                              &
       &                        TIO_MESH_QUAD_COLINEAR_F, TIO_COORD_CARTESIAN_F, .false., "Group2", 1, &
       &                        TIO_INTEGER4_F, TIO_REAL8_F, TIO_3D_F, 100, 100, 100, 0, 1,               &
       &                        "mm", "mm", "mm", "x", "y", "z" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Set_Quad_Section_f(file_id, mesh_id, section_id, TIO_3D_F, 1, 10, 10, 20, 20, 30)
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_set_quad_section_f

!=======================================================================================================================

@test
subroutine test_tio_set_unstr_chunk_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_set_unstr_chunk.h5"
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title")
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Create_State_f( file_id, "State1", state_id, 1, 0.0_TIO_TIMEK, "seconds" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Create_Mesh_f( file_id, state_id, "UnstrMesh", mesh_id,                        &
       &                        TIO_MESH_UNSTRUCT_F, TIO_COORD_CARTESIAN_F, .false., "Group4", 1,  &
       &                        TIO_INTEGER4_F, TIO_REAL8_F, TIO_3D_F, 1331, 1000, 1, 8000, 1,     &
       &                        "mm", "mm", "mm", "x", "y", "z" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Set_Unstr_Chunk_f(file_id, mesh_id, 1, TIO_3D_F, 36, 25, 1, 4, 1, 1, 1, 4, 2, 0)
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_set_unstr_chunk_f


!=======================================================================================================================

@test
subroutine test_tio_get_unstr_chunk_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_chunk.h5"
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id
  integer(kind=TIO_IPK) :: ndims
  integer(kind=TIO_SIZEK) :: nnodes, ncells, nshapes, nconnectivity
  integer(kind=TIO_SIZEK) :: nghost_nodes,  nghost_cells
  integer(kind=TIO_SIZEK) :: nghost_shapes, nghost_connectivity
  integer(kind=TIO_SIZEK) :: nmixcell, nmixcomp

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_State_f(file_id, "State1", state_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_Mesh_f(file_id, state_id, "UnstrMesh", mesh_id)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Get_Unstr_Chunk_f( file_id, mesh_id, 1, ndims,              &
       &                            nnodes, ncells, nshapes, nconnectivity,  &
       &                            nghost_nodes,  nghost_cells,             &
       &                            nghost_shapes, nghost_connectivity,      &
       &                            nmixcell, nmixcomp )
  @assertEqual(TIO_SUCCESS_F, ierr)

  @assertEqual( TIO_3D_F, ndims )
  @assertEqual( 36, nnodes )
  @assertEqual( 25, ncells )
  @assertEqual( 1, nshapes )
  @assertEqual( 4, nconnectivity )
  @assertEqual( 1, nghost_nodes )
  @assertEqual( 1, nghost_cells )
  @assertEqual( 1, nghost_shapes )
  @assertEqual( 4, nghost_connectivity )
  @assertEqual( 2, nmixcell )
  @assertEqual( 0, nmixcomp )


end subroutine test_tio_get_unstr_chunk_f


!=======================================================================================================================

@test
subroutine test_tio_set_unstr_section_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_set_unstr_section.h5"
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id
  integer(kind=TIO_OBJK) :: section_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title")
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Create_State_f( file_id, "State1", state_id, 1, 0.0_TIO_TIMEK, "seconds" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Create_Mesh_f( file_id, state_id, "UnstrMesh", mesh_id,                        &
       &                        TIO_MESH_UNSTRUCT_F, TIO_COORD_CARTESIAN_F, .false., "Group4", 1,  &
       &                        TIO_INTEGER4_F, TIO_REAL8_F, TIO_3D_F, 1331, 1000, 1, 8000, 1,     &
       &                        "mm", "mm", "mm", "x", "y", "z" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Set_Unstr_Section_f(file_id, mesh_id, section_id, TIO_CENTRE_CELL_F, 3, (/ 1, 2, 3 /))
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_set_unstr_section_f

!=======================================================================================================================

@test
subroutine test_tio_set_point_chunk_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_set_point_chunk.h5"
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title")
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Create_State_f( file_id, "State1", state_id, 1, 0.0_TIO_TIMEK, "seconds" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Create_Mesh_f( file_id, state_id, "PointMesh", mesh_id,                        &
       &                        TIO_MESH_POINT_F, TIO_COORD_CARTESIAN_F, .false., "Group4", 1,  &
       &                        TIO_INTEGER4_F, TIO_REAL8_F, TIO_3D_F, 1000, 0, 0, 0, 1,     &
       &                        "mm", "mm", "mm", "x", "y", "z" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Set_Point_Chunk_f(file_id, mesh_id, 1, TIO_3D_F, 0, 10, 2)
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_set_point_chunk_f

!=======================================================================================================================

@test
  subroutine test_tio_get_point_chunk_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_chunk.h5"
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id
  integer(kind=TIO_IPK) :: ndims
  integer(kind=TIO_SIZEK) :: nl, nh
  integer(kind=TIO_SIZEK) :: nghost_nodes

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_State_f(file_id, "State1", state_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_Mesh_f(file_id, state_id, "PointMesh", mesh_id)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Get_Point_Chunk_f(file_id, mesh_id, 1, ndims, nl, nh, nghost_nodes)
  @assertEqual(TIO_SUCCESS_F, ierr)

  @assertEqual( TIO_3D_F, ndims )
  @assertEqual( 0, nl )
  @assertEqual( 10, nh )
  @assertEqual( 2, nghost_nodes )

end subroutine test_tio_get_point_chunk_f

!=======================================================================================================================

@test
subroutine test_tio_set_point_section_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_set_point_section.h5"
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id
  integer(kind=TIO_OBJK) :: section_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title")
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Create_State_f( file_id, "State1", state_id, 1, 0.0_TIO_TIMEK, "seconds" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Create_Mesh_f( file_id, state_id, "PointMesh", mesh_id,                        &
       &                        TIO_MESH_POINT_F, TIO_COORD_CARTESIAN_F, .false., "Group4", 1,  &
       &                        TIO_INTEGER4_F, TIO_REAL8_F, TIO_3D_F, 1000, 0, 0, 0, 1,     &
       &                        "mm", "mm", "mm", "x", "y", "z" )
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Set_Point_Section_f(file_id, mesh_id, section_id, 3, (/ 1, 2, 3 /))
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_set_point_section_f

!=======================================================================================================================
