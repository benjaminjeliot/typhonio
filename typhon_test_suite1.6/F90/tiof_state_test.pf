!
! tiof_state_test.pf
!

!=======================================================================================================================

subroutine test_tio_list_states_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_state.h5"
  integer(kind=TIO_FILEK) :: file_id
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_SIZEK) :: nobj
  character(len=TIO_STRLEN_F), dimension(3) :: names

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  ierr = TIO_List_States_f(file_id, nobj=nobj)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  @assertEqual( 3, nobj )
  
  ierr = TIO_List_States_f(file_id, names=names)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  !@assertEqual( (/ "State1", "State2", "State3" /), names )
  @assertEqual( "State1", names(1) )
  @assertEqual( "State2", names(2) )
  @assertEqual( "State3", names(3) )

end subroutine test_tio_list_states_f

!=======================================================================================================================

subroutine test_tio_create_state_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_create_state.h5"
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title")
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Create_State_f( file_id, "State1", state_id, 1, 0.0_TIO_TIMEK, "seconds" )
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_create_state_f

!=======================================================================================================================

subroutine test_tio_open_state_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_state.h5"
  integer(kind=TIO_FILEK)     :: file_id
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_OBJK)      :: state_id
  integer(kind=TIO_STEPK)     :: step
  real(kind=TIO_TIMEK)        :: time
  character(len=TIO_STRLEN_F) :: units

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  ierr = TIO_Open_State_f( file_id, "State1", state_id, step, time, units )
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  @assertEqual( 1, step )
  @assertEqual( 0.0_TIO_TIMEK, time )
  @assertEqual( "ms", units )

end subroutine test_tio_open_state_f

!=======================================================================================================================

subroutine test_tio_open_state_idx_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_state.h5"
  integer(kind=TIO_FILEK) :: file_id
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_OBJK)      :: state_id
  character(len=TIO_STRLEN_F) :: state_name
  integer(kind=TIO_STEPK)     :: step
  real(kind=TIO_TIMEK)        :: time
  character(len=TIO_STRLEN_F) :: units

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  ierr = TIO_Open_State_idx_f(file_id, 1, state_name, state_id, step, time, units)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  @assertEqual( "State1", state_name )
  @assertEqual( 1, step )
  @assertEqual( 0.0_TIO_TIMEK, time )
  @assertEqual( "ms", units )

end subroutine test_tio_open_state_idx_f

!=======================================================================================================================

subroutine test_tio_get_state_info_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_state.h5"
  integer(kind=TIO_FILEK) :: file_id
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_OBJK)      :: state_id
  character(len=TIO_STRLEN_F) :: state_name
  integer(kind=TIO_STEPK)     :: step
  real(kind=TIO_TIMEK)        :: time
  character(len=TIO_STRLEN_F) :: units

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  ierr = TIO_Open_State_f( file_id, "State1", state_id, step, time, units )
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  ierr = TIO_Get_State_Info_f(file_id, state_id, state_name, step, time, units)
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  @assertEqual( "State1", state_name )
  @assertEqual( 1, step )
  @assertEqual( 0.0_TIO_TIMEK, time )
  @assertEqual( "ms", units )

end subroutine test_tio_get_state_info_f

!=======================================================================================================================

subroutine test_tio_close_state_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_close_state.h5"
  integer(kind=TIO_FILEK) :: file_id
  integer(kind=TIO_OBJK) :: state_id
  integer(kind=TIO_OBJK) :: mesh_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title")
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Create_State_f( file_id, "State1", state_id, 1, 0.0_TIO_TIMEK, "seconds" )
  @assertEqual(TIO_SUCCESS_F, ierr)
  
  ierr = TIO_Close_State_f( file_id, state_id )
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_close_state_f

!=======================================================================================================================
