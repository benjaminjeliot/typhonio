! test_tiof_access.pf

@test
subroutine test_tio_get_libversion_f

    use pfunit_mod
    use typhonio
    implicit none
    
    integer :: ierr
    integer :: maj, min, rel
    
    ierr = tio_get_libversion_f(maj, min, rel)

    @assertEqual(ierr, TIO_SUCCESS_F)    
    @assertEqual(1, maj)
    @assertEqual(6, min)
    @assertEqual(0, rel)

end subroutine test_tio_get_libversion_f

!=======================================================================================================================

@test
subroutine test_tio_get_fileversion_f

    use pfunit_mod
    use typhonio
    implicit none
    
    integer :: ierr
    integer :: maj, min, rel
    character(len=*), parameter :: file_name = "./tio_files/tio_access.h5"
    
    ierr = tio_get_fileversion_f(file_name, maj, min, rel)

    @assertEqual(ierr, TIO_SUCCESS_F)
    @assertEqual(1, maj)
    @assertEqual(6, min)
    @assertEqual(0, rel)

end subroutine test_tio_get_fileversion_f

!=======================================================================================================================

@test
subroutine test_tio_checkfile_f

  use pfunit_mod
  use typhonio
  implicit none

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_access.h5"

  ierr = TIO_CheckFile_f(file_name)

  @assertEqual(TIO_SUCCESS_F, ierr)
  
end subroutine test_tio_checkfile_f

!=======================================================================================================================

@test(npes=[1,2,4])
subroutine test_tio_open_f(this)

  use pfunit_mod
  use typhonio
  implicit none
  class (MPITestMethod), intent(inout) :: this
  
  integer :: mpi_rank, mpi_comm

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_access.h5"
  integer(kind=TIO_FILEK) :: file_id
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title

  mpi_rank = this%getProcessRank()
  mpi_comm = this%getMPICommunicator()

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title, &
       &                comm=mpi_comm, info=TIO_NULL_F, rank=mpi_rank)

  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_open_f

!=======================================================================================================================

@test(npes=[1,2,4])
subroutine test_tio_checkobject_f(this)

  use pfunit_mod
  use typhonio
  implicit none
  
  class (MPITestMethod), intent(inout) :: this
  
  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_access.h5"
  integer(kind=TIO_FILEK) :: file_id
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_OBJK) :: state_id
  character(len=TIO_STRLEN_F) :: state_name
  integer(kind=TIO_OBJK) :: mesh_id
  character(len=TIO_STRLEN_F) :: mesh_name

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title, &
       &                comm=this%getMPICommunicator(), info=TIO_NULL_F, rank=this%getProcessRank())
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_State_idx_f(file_id, 1, state_name, state_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_Mesh_idx_f(file_id, state_id, 1, mesh_name, mesh_id)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_CheckObject_f(file_id, state_id, mesh_name)
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_checkobject_f

!=======================================================================================================================

@test(npes=[1,2,4])
subroutine test_tio_isfileopen_f(this)

  use pfunit_mod
  use typhonio
  implicit none

  class (MPITestMethod), intent(inout) :: this
  integer :: ierr

  character(len=*), parameter :: file_name = "./tio_files/tio_access.h5"
  integer(kind=TIO_FILEK) :: file_id
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_OBJK) :: state_id
  character(len=TIO_STRLEN_F) :: state_name
  integer(kind=TIO_OBJK) :: mesh_id
  character(len=TIO_STRLEN_F) :: mesh_name

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title, &
       &                comm=this%getMPICommunicator(), info=TIO_NULL_F, rank=this%getProcessRank())
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_IsFileOpen_f(file_name)
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_isfileopen_f

!=======================================================================================================================

@test(npes=[1,2,4])
subroutine test_tio_isobjectopen_f(this)

  use pfunit_mod
  use typhonio
  implicit none

  class(MPITestMethod), intent(inout) :: this

  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_access.h5"
  integer(kind=TIO_FILEK) :: file_id
  character(len=TIO_STRLEN_F) :: code_name
  character(len=TIO_STRLEN_F) :: version
  character(len=TIO_STRLEN_F) :: date
  character(len=TIO_STRLEN_F) :: title
  integer(kind=TIO_OBJK) :: state_id
  character(len=TIO_STRLEN_F) :: state_name
  integer(kind=TIO_OBJK) :: mesh_id
  character(len=TIO_STRLEN_F) :: mesh_name

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title, &
       &                comm=this%getMPICommunicator(), info=TIO_NULL_F, rank=this%getProcessRank())
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_State_idx_f(file_id, 1, state_name, state_id)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_Open_Mesh_idx_f(file_id, state_id, 1, mesh_name, mesh_id)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_IsObjectOpen_f(file_id, TIO_NULL_F, state_name)
  @assertEqual(TIO_SUCCESS_F, ierr)
  ierr = TIO_IsObjectOpen_f(file_id, state_id, mesh_name)
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_isobjectopen_f

!=======================================================================================================================

@test(npes=[1])
subroutine test_tio_create_f(this)

  use pfunit_mod
  use typhonio
  implicit none

  class (MPITestMethod), intent(inout) :: this

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_create.h5"
  integer(kind=TIO_FILEK) :: file_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title", &
       &                comm=this%getMPICommunicator(), info=TIO_NULL_F, rank=this%getProcessRank())
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_create_f

!=======================================================================================================================

@test(npes=[1])
subroutine test_tio_close_f(this)

  use pfunit_mod
  use typhonio
  implicit none

  class(MPITestMethod), intent(inout) :: this

  integer :: ierr
  character(len=*), parameter :: file_name = "tio_close.h5"
  integer(kind=TIO_FILEK) :: file_id

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, "TestCode", "V0.0", "01-01-2000", "Test Title", &
       &                comm=this%getMPICommunicator(), info=TIO_NULL_F, rank=this%getProcessRank())
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_IsFileOpen_f(file_name)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Close_f(file_id)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_IsFileOpen_f(file_name)
  @assertFalse(TIO_SUCCESS_F .eq. ierr)

end subroutine test_tio_close_f

!=======================================================================================================================

@test(npes=[4])
subroutine test_tio_flush_f(this)

  use pfunit_mod
  use typhonio
  implicit none

  class (MPITestMethod), intent(inout) :: this
  integer :: ierr
  character(len=*), parameter :: file_name = "tio_flush.h5"
  integer(kind=TIO_FILEK) :: file_id

  character(len=TIO_STRLEN_F), parameter :: code_name = "TestCode"
  character(len=TIO_STRLEN_F), parameter :: version = "V0.0"
  character(len=TIO_STRLEN_F), parameter :: date = "01-01-2000"
  character(len=TIO_STRLEN_F), parameter :: title = "Test Title"

  ierr = TIO_Create_f(file_name, file_id, TIO_ACC_REPLACE_F, code_name, version, date, title, &
       &                comm=this%getMPICommunicator(), info=TIO_NULL_F, rank=this%getProcessRank())
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_IsFileOpen_f(file_name)
  @assertEqual(TIO_SUCCESS_F, ierr)

  ierr = TIO_Flush_f(file_id)
  @assertEqual(TIO_SUCCESS_F, ierr)

end subroutine test_tio_flush_f

!=======================================================================================================================

@test(npes=[1,2,4])
subroutine test_tio_get_file_info_f(this)

  use pfunit_mod
  use typhonio
  implicit none

  class (MPITestMethod), intent(inout) :: this
  integer :: ierr
  character(len=*), parameter :: file_name = "./tio_files/tio_access.h5"
  integer(kind=TIO_FILEK) :: file_id
  character(len=TIO_STRLEN_F) :: file_name2
  character(len=TIO_STRLEN_F) :: code_name, code_name2
  character(len=TIO_STRLEN_F) :: version, version2
  character(len=TIO_STRLEN_F) :: date, date2
  character(len=TIO_STRLEN_F) :: title, title2

  ierr = TIO_Open_f(file_name, file_id, TIO_ACC_READONLY_F, code_name, version, date, title, &
       &                comm=this%getMPICommunicator(), info=TIO_NULL_F, rank=this%getProcessRank())
  @assertEqual(TIO_SUCCESS_F , ierr)

  ierr = TIO_Get_File_Info_f(file_id, file_name2, code_name2, version2, date2, title2)
  @assertEqual(TIO_SUCCESS_F , ierr)

  @assertEqual(file_name, file_name2)
  @assertEqual(code_name, code_name2)
  @assertEqual(version,   version2)
  @assertEqual(date,      date2)
  @assertEqual(title,     title2)

end subroutine test_tio_get_file_info_f

!=======================================================================================================================
